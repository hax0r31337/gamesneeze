#!/usr/bin/env bash
# Copy paste from Gamesennze and Fuzion
# https://github.com/seksea/gamesneeze
# https://github.com/LWSS/Fuzion


gdb="$(dirname "$0")/gdb" # For using a gdb build such as the cathook one (The one included)
libraryname="libgamesneeze.so" # The name of the library to patch

function echo_green {
	echo -e "\\e[32m$*\\e[0m"
}

function echo_orange {
	echo -e "\\e[33m$*\\e[0m"
}

function echo_red {
	echo -e "\\e[31m$*\\e[0m"
}

secs_to_human() {
    if [[ -z ${1} || ${1} -lt 60 ]] ;then
        min=0 ; secs="${1}"
    else
        time_mins=$(echo "scale=2; ${1}/60" | bc)
        min=$(echo ${time_mins} | cut -d'.' -f1)
        secs="0.$(echo ${time_mins} | cut -d'.' -f2)"
        secs=$(echo ${secs}*60|bc|awk '{print int($1+0.5)}')
    fi
    echo "Time Elapsed : ${min} minutes and ${secs} seconds."
}

function load {
    csgo_pid=$(pidof csgo_linux64)
    if [ -z "$csgo_pid" ]; then
        echo_red "CS:GO needs to be open before you can inject, exiting..."
        exit 1
    fi

    start=$(date +%s)

    echo_orange "Patching cheat instead to bypass anti-cheat"

    # Get a Random name from the build_names file.
    filename=$(shuf -n 1 build_names)

    # In case this file exists, get another one. ( checked it works )
    while [ -f "/usr/lib/${filename}" ] || grep -q ${filename} /proc/$(pidof csgo_linux64)/maps; do
        filename=$(shuf -n 1 build_names)
    done

    patchelf --set-soname "$filename" "$libraryname" || echo_orange "Warning: your patchelf version does not support \"--set-soname\"\nConsider building from source: https://github.com/NixOS/patchelf"

    echo_orange "Injecting cheat $filename into pid $csgo_pid..."

    # Bypass for crash dumps being sent
    # You may also want to consider using -nobreakpad in your launch options.
    sudo rm -rf /tmp/dumps           # Remove if it exists
    sudo mkdir --mode=000 /tmp/dumps # Make it as root with no permissions

    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope > /dev/null  # Only allows root to inject code. This is temporary until reboot.
    if [ -e inject.lock ]; then
        fake_library=$(cat inject.lock)
        echo_red "removing library generated during last injection progress ($fake_library)"
        sudo rm "/usr/lib/$fake_library" > /dev/null
    fi
    sudo cp $libraryname /usr/lib/$filename
    echo "$filename" > inject.lock
    # sudo chmod 111 /usr/lib/$filename

    sudo killall -19 steam
    sudo killall -19 steamwebhelper

    lib_dir_name="lib"
    if [ $(getconf LONG_BIT) = 64 ]; then
        lib_dir_name+="64"
    fi

    gdbOut=$(
      $gdb -n -q -batch \
      -ex "set auto-load safe-path /usr/lib/" \
      -ex "attach $csgo_pid" \
      -ex "set \$dlopen = (void*(*)(char*, int)) dlopen" \
      -ex "call \$dlopen(\"/usr/lib/$filename\", 1)" \
      -ex "detach" \
      -ex "quit"
    )
    lastLine="${gdbOut##*$'\n'}"
    if [[ "$lastLine" != "\$1 = (void *) 0x0" ]]; then
        echo_green "Successfully injected!"
    else
        echo_red "Injection failed, make sure you have compiled."
    fi

    sleep 1
    sudo killall -18 steamwebhelper
    sudo killall -18 steam

    secs_to_human "$(($(date +%s) - ${start}))"

    # while pgrep -x "csgo_linux64" > /dev/null; do
    #     sleep 1
    # done
    # sleep 10

    sudo rm "/usr/lib/${filename}" > /dev/null
    rm inject.lock
}

function build {
    cmake .

    if ! hash patchelf 2>/dev/null; then
        echo_red -e "You need to install the \"patchelf\" command!\nUse your package manager to install it, or get source here:\nhttps://github.com/NixOS/patchelf"
        exit 1
    fi
    
    make -j"$(grep -c "^processor" /proc/cpuinfo)" "$@" 
    strip -s -v "$libraryname"

    echo "Build Completed."
}

function build_debug {
    cmake -D CMAKE_BUILD_TYPE=Debug .

    if ! hash patchelf 2>/dev/null; then
        echo_red -e "You need to install the \"patchelf\" command!\nUse your package manager to install it, or get source here:\nhttps://github.com/NixOS/patchelf"
        exit 1
    fi
    
    make -j"$(grep -c "^processor" /proc/cpuinfo)" "$@" 
    # strip -s -v "$libraryname"

    echo "Build Completed."
}

function load_debug {
    load
    $gdb -p "$(pidof csgo_linux64)"
}

while [[ $# -gt 0 ]]; do
keys="$1"
case $keys in
    -l|--load)
        load
        shift
        ;;
    -ld|--load_debug)
        load_debug
        shift
        ;;
    -b|--build)
        build
        shift
        ;;
    -bd|--build_debug)
        build_debug
        shift
        ;;
    *)
        echo "
Neko:
    -l, --load    Load nekosense into CS:GO
    -b, --build   Build nekosense
"
        exit
        ;;
esac
done